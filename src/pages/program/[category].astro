---
import MainLayout from "../../layouts/MainLayout.astro";
import "../../styles/global.css";

import { createClient } from '@supabase/supabase-js';
import EventList from "../../components/EventList.astro";
import FilterBtn from "../../components/Filter_btn.astro";

export async function getStaticPaths() {
    const supabaseUrl = 'https://ytbpkmmrhxeuawuggktn.supabase.co';
    const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inl0YnBrbW1yaHhldWF3dWdna3RuIiwicm9sZSI6ImFub24iLCJpYXQiOjE2Nzg3ODY5NDEsImV4cCI6MTk5NDM2Mjk0MX0.C7HKtjFf03nvDpJTjYOtRlR-1nQ18yozjpLSTlaRKO8';
    const supabase = createClient(supabaseUrl, supabaseKey);

    const response = await supabase
        .from('festival_events')
        .select('*');

    const data = await response.data;

    function filterEventsByCategories(data) {
        const filteredEvents = {};

        data.forEach(event => {
        event.categories.forEach(category => {
        if (!filteredEvents.hasOwnProperty(category)) {
            filteredEvents[category] = [];
        }
        filteredEvents[category].push(event);
        });
        });

        return filteredEvents;
    }
    const categorizedEvents = filterEventsByCategories(data);
    const categories = Object.keys(categorizedEvents);

    // make categories an array of objects with params and name
    const paths = categories.map(category => {
        return {
            params: {
                category: category, 
            },
        };
    });

    // add "category: all" to the paths array
    paths.push({
        params: {
            category: 'All',
        },
    });

    return paths; // Return the 'paths' array directly
}

const supabaseUrl = 'https://ytbpkmmrhxeuawuggktn.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inl0YnBrbW1yaHhldWF3dWdna3RuIiwicm9sZSI6ImFub24iLCJpYXQiOjE2Nzg3ODY5NDEsImV4cCI6MTk5NDM2Mjk0MX0.C7HKtjFf03nvDpJTjYOtRlR-1nQ18yozjpLSTlaRKO8';

const supabase = createClient(supabaseUrl, supabaseKey);

const response = await supabase
  .from('festival_events')
  .select('*')
  .order('date', { ascending: true })
  .order ('start_time', { ascending: true });

// response data as astro props
const data = response.data

function filterEventsByCategories(data) {
  const filteredEvents = {};

  data.forEach(event => {
    event.categories.forEach(category => {
      if (!filteredEvents.hasOwnProperty(category)) {
        filteredEvents[category] = [];
      }
      filteredEvents[category].push(event);
    });
  });

  return filteredEvents;
}
const categorizedEvents = filterEventsByCategories(data);
const categories = Object.keys(categorizedEvents);

const { category } = Astro.params;


---

<MainLayout title={category}>
    <section>
      <h1>Program</h1>
      <a href="/">Hent pdf'en for hele programmet <b>her</b></a>
    </section>
  
      <div>
        <ul class="categories">
          {categories.map (category => (
            <li>
              <FilterBtn category={category} />
            </li>
          ))}
        </ul>
      </div>
      <h2>Lørdag</h2>
        <EventList date="2023-04-22" events={data} category={category}/>
  
      <h2>Søndag</h2>
        <EventList date="2023-04-23" events={data} category={category}/>
  </MainLayout>
  
  <style>
    h1 {
      margin-bottom: 1rem;
    }
  
    h2 {
          margin-bottom: 1rem;
          margin-top: 2rem;
      }
    ul {
      display: flex;
      flex-direction: row;
      flex-wrap: wrap;
      list-style: none;
      padding: 0;
      margin: 0;
      gap: 1rem;
      overflow-x: scroll;
      margin-bottom: 2rem;
  
    }
    section {
      margin-bottom: 2rem;
      max-width: 800px;
          margin-inline: auto;
    }
  
    .categories {
      margin-block: 1rem;
    }
    
    a {
      color: var(--color-primary);
      text-decoration: none;
    }
  </style>