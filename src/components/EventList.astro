---
import { createClient } from '@supabase/supabase-js';
import EventCard from './EventCard.astro';

const supabaseUrl = 'https://ytbpkmmrhxeuawuggktn.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inl0YnBrbW1yaHhldWF3dWdna3RuIiwicm9sZSI6ImFub24iLCJpYXQiOjE2Nzg3ODY5NDEsImV4cCI6MTk5NDM2Mjk0MX0.C7HKtjFf03nvDpJTjYOtRlR-1nQ18yozjpLSTlaRKO8';

const supabase = createClient(supabaseUrl, supabaseKey);

const response = await supabase
  .from('festival_events')
  .select('*')
  .order('date', { ascending: true })
  .order ('start_time', { ascending: true });

const events = response.data;

function filterEventsByCategories(events) {
  const filteredEvents = {};

  events.forEach(event => {
    event.categories.forEach(category => {
      if (!filteredEvents.hasOwnProperty(category)) {
        filteredEvents[category] = [];
      }
      filteredEvents[category].push(event);
    });
  });

  return filteredEvents;
}

const categorizedEvents = filterEventsByCategories(events);

const categories = Object.keys(categorizedEvents);
---

<div class="grid">
    {events.filter(event => event.date.includes(Astro.props.date)).map(event => {
      return (
        <EventCard {...event} />
      )
    })}
</div>

<style>
    .grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        grid-gap: 1rem;
        margin-bottom: 2rem;
    }


</style>